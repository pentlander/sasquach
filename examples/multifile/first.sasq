First {
    use math/Math,
    use std/Option,
    use std/io/IO,
    use std/Int,
    use std/List,
    use std/Map,
    use std/Hash,
    use std/String,
    use std/Iterator,
    use std/Char,

    use foreign java/io/File,
    use foreign java/io/PrintStream,
    use foreign java/lang/System,

    gee = (arg: { bar: Int, foo: String }, otherArg: String): Void -> {
        let toPrint = if (arg.bar > 0) arg.foo else otherArg
        print toPrint
    },

    bar = (boo: String): String -> "doo",

    mainStatic = (args: Array[String]): Void -> {
        let third = { foo = "third", bar = 45 }
        let optStr = Option.Some("an option")
        let optInt = Option.map(optStr, (input) -> 10)
        print optInt
        gee(third, "testing")
        IO.println("testing std")
        let drinkList = List.new()
          |> List.conj("drink")
          |> List.map((value: String): Int -> 4)

        System#out |> PrintStream#println(drinkList |> List.get(0) |> Int.toString())

        let sum = List.of("82")
          |> List.conj("18")
          |> List.reduce(0, (n: Int, str: String): Int -> n + Int.parse(str))
        print sum

        let mapper = (entry: (String, Int)): (Int, String) -> (4, "hi")
        mapper(("foo", 3))
        let map = Map.of(String, "first", 1)
          |> Map.assoc("second", 2)
        print Map.get(map, "first") |> Option.unwrap()

        let tup = (4, 5)
        print tup._1
        print "char"
        "test"
          |> String.iter()
          |> Iterator.map((ch) -> Char.toString(ch))
          |> Iterator.filter((s) -> String.equals(s, "t"))
          |> Iterator.forEach((s) -> { print s })
        print "end"
    }
}
