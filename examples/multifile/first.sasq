Option {
    type T[A] = { value: A },

    some = [A](value: A): T[A] -> { value = value },
    map = [A, B](option: T[A], mapper: { map: (input: A) -> B }): T[B] -> { value = mapper.map(option.value) }
}

First {
    use math/Math,
    use first/Option,
    use std/io/IO,
    use std/std/Integer,
    use std/std/List,
    use foreign java/io/File,
    use foreign java/io/PrintStream,
    use foreign java/lang/System,

    gee = (arg: { bar: Int, foo: String }, otherArg: String): Void -> {
        let toPrint = if (arg.bar > 0) arg.foo else otherArg
        print toPrint
    },

    bar = (boo: String): String -> "doo",

    main = (args: String[]): Void -> {
        let third = { foo = "third", bar = 45 }
        let optStr = Option.some("an option")
        let optInt = Option.map(optStr, { map = (input: String): Int -> 10 })
        print optInt.value
        PrintStream#println(System#out, optInt.value)
        gee(third, "testing")
        IO.println("testing std")
        let drinkList = List.new()
          |> List.conj("drink")
          |> List.map((value: String): Int -> 4)

        System#out |> PrintStream#println(List.get(drinkList, 0))

        let sum = List.of("82")
          |> List.conj("18")
          |> List.reduce(0, (n: Int, str: String): Int -> n + Integer.parse(str))
        print sum
    }
}