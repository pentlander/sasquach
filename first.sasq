Math {
    plus = (a: int, b: int): int -> a + b
}

Option {
    some = [T](value: T): { value: T } -> { value = value },
    map = [T, U](option: { value: T }, mapper: { map: (input: T) -> U }): { value: U } -> { value = mapper.map(option.value) }
}

First {
    use first/Math,
    use first/Option,
    use foreign java/io/File,
    use foreign java/io/PrintStream,
    use foreign java/lang/System,

    gee = (arg: { bar: int, foo: string }, otherArg: string): void -> {
        let toPrint = if (arg.bar > 0) arg.foo else otherArg
        print toPrint
    },

    bar = (boo: string): string -> "doo",

    main = (args: string[]): void -> {
        let third = { foo = "third", bar = 45 }
        let optStr = Option.some("an option")
        let optInt = Option.map(optStr, { map = (input: string): int -> 10 })
        print optInt.value
        PrintStream#println(System#out, optInt.value)
        gee(third, "testing")
    }
}