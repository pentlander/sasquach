Integer {
  use foreign java/lang/Integer,

  toString = (int: Int): String -> Integer#toString(int),

  parse = (str: String): Int -> Integer#parseInt(str)
}

List {
  use foreign java/util/ArrayList,
  use foreign java/util/Iterator,

  type T[A] = { list: ArrayList },

  new = [A](): T[A] -> { list = ArrayList#new() },

  of = [A](value: A): T[A] -> {
    let list = ArrayList#new()
    ArrayList#add(list, value)
    { list = list }
  },

  conj = [A](list: T[A], value: A): T[A] -> {
    let listCopy = ArrayList#new(list.list)
    ArrayList#add(listCopy, value)
     { list = listCopy }
  },

  get = [A](list: T[A], idx: Int): A -> ArrayList#get(list.list, idx),

  size = [A](list: T[A]): Int -> ArrayList#size(list.list),

  map = [A, B](list: T[A], mapper: (value: A) -> B): T[B] -> {
    let size = ArrayList#size(list.list)
    let newList = ArrayList#new(size)
    loop (let i = 0) ->
      if i < size {
        let item = get(list, i)
        ArrayList#add(newList, mapper(item))
        recur(i + 1)
      } else {
        { list = newList }
      }
  },

  filter = [A](list: T[A], filterer: (value: A) -> Boolean): T[A] -> {
    let size = ArrayList#size(list.list)
    let newList = ArrayList#new(size)
    loop (let i = 0) ->
      if i < size {
        let item = get(list, i)
        if (filterer(item)) ArrayList#add(newList, item)
        recur(i + 1)
      } else {
        { list = newList }
      }
  },

  reduce = [A, B](list: T[A], init: B, accumulator: (accum: B, value: A) -> B): B -> {
    let size = size(list)
    loop (let i = 0, let b = init) ->
      if i < size {
        let item = get(list, i)
        recur(i + 1, accumulator(b, item))
      } else {
        b
      }
  },
}