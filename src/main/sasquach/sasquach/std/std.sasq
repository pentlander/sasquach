Int {
  use foreign java/lang/Integer,

  equals = (a: Int, b: Int): Boolean -> a == b,

  parse = (str: String): Int -> Integer#parseInt(str),

  toString = (int: Int): String -> Integer#toString(int),
}

Char {
  use foreign java/lang/Character,

  equals = (a: Char, b: Char): Boolean -> a == b,

  toString = (ch: Char): String -> Character#toString(ch),
}

String {
  use std/Option,
  use std/Ref,
  use std/Iterator,

  use foreign java/lang/CharSequence,
  use foreign java/lang/String,

  equals = (a: String, b: String): Boolean -> String#equals(a, b),

  hashCode = (str: String): Int -> String#hashCode(str),

  toString = (val: String): String -> val,

  concat = (str: String, with otherStr: String): String -> String#concat(str, otherStr),

  contains = (str: String, subStr: String): Boolean -> String#contains(str, subStr),

  length = (str: String): Int -> String#length(str),

  charAt = (str: String, index: Int): Option.T[Char] ->
    if (index < length(str)) Option.Some(String#charAt(str, index)) else Option.None,

  iter = (str: String): Iterator.T[Char] -> {
    let idx = Ref.new(0)
    Iterator.new(() -> {
      let ch = charAt(str, Ref.get(idx))
      if Option.isSome(ch) {
        idx |> Ref.map((i) -> i + 1)
      }
      ch
    })
  },
}

Ref {
  use foreign com/pentlander/sasquach/runtime/Ref,

  type T[A] = (Ref[A]),

  new = [A](value: A): T[A] -> T(Ref#new(value)),

  get = [A](ref: T[A]): A -> Ref#get(ref._0),

  set = [A](ref: T[A], value: A): Void -> Ref#set(ref._0, value),

  map = [A](ref: T[A], mapper: (prev: A) -> A): Void -> {
    let next = ref |> get() |> mapper()
    set(ref, next)
  }
}

Iterator {
  use std/Option,
  use std/Ref,

  typealias T[A] = { next: () -> Option.T[A], .. },

  new = [A](next: () -> Option.T[A]): T[A] -> { next = next },

  next = [A](iter: T[A]): Option.T[A] -> iter.next(),

  map = [A, B](iter: T[A], fn: (item: A) -> B): T[B] -> new(() ->
    iter |> next() |> Option.map(fn)
  ),

  filter = [A](iter: T[A], fn: (item: A) -> Boolean): T[A] ->
    new(() ->
      loop () -> match next(iter) {
        Option.Some(item) -> if fn(item) Option.Some(item) else recur(),
        Option.None -> Option.None,
      }
    ),

  filterMap = [A, B](iter: T[A], fn: (item: A) -> Option.T[B]): T[B] ->
    new(() ->
      loop () -> match next(iter) {
        Option.Some(item) -> match fn(item) {
          Option.Some(mappedItem) -> Option.Some(mappedItem),
          Option.None -> recur(),
        },
        Option.None -> Option.None,
      }
    ),

  flatMap = [A, B](iter: T[A], fn: (item: A) -> T[B]): T[B] -> {
    let nestedIterRef = Ref.new(Option.None)
    new(() -> {
      // Option.T[T[B]]
      Ref.get(nestedIterRef)
        |> Option.orElse(() ->
          next(iter) |> Option.map((item) -> {
            let newNestedIter = fn(item)
            Ref.set(nestedIterRef, Option.Some(newNestedIter))
            newNestedIter
          })
        )
        |> Option.flatMap((nestedIter) -> next(nestedIter))
    })
  },

  reduce = [A, B](iter: T[A], init: B, accumulator: (accum: B, value: A) -> B): B ->
    loop (let accum = init) -> match next(iter) {
      Option.Some(item) -> recur(accumulator(accum, item)),
      Option.None -> accum,
    },

  forEach = [A](iter: T[A], fn: (item: A) -> Void): Void -> {
    loop () -> match next(iter) {
      Option.Some(item) -> {
        fn(item)
        recur()
      },
      Option.None -> {},
    }
  },
}

Into {
  type T[A, B] = { into: (a: A) -> B, }
}

Compare {
  type Ordering = | Less | Equal | Greater,
  type T[A] = { compare: (a1: A, a2: A) -> Ordering },

  compare = [A](cmp: T[A], a1: A, a2: A): Ordering -> cmp.compare(a1, a2),
}

Exception {
  use foreign com/pentlander/sasquach/runtime/Stdlib,

  illegalState = [A](msg: String): A ->
    Stdlib#throwIllegalStateException(msg)
}

Eq {
  type T[A] = { equals: (val1: A, val2: A) -> Boolean, .. },

  equals = [A](eq: T[A], val1: A, val2: A): Boolean -> eq.equals(val1, val2),
}

Option {
  use std/Eq,
  use std/Result,
  use std/Exception,
  use foreign java/util/Objects,
  use foreign java/util/Optional,

  type T[A] = | Some(A) | None,

  some = [A](value: A): T[A] -> Some(value),

  none = [A](): T[A] -> None,

  isSome = [A](option: T[A]): Boolean -> match option {
    Some(_) -> true,
    None -> false,
  },

  unwrap = [A](option: T[A]): A -> match option {
    Some(value) -> value,
    None -> Exception.illegalState("option is None"),
  },

  getOrElse = [A](option: T[A], fn: () -> A): A -> match option {
    Some(value) -> value,
    None -> fn(),
  },

  flatMap = [A, B](option: T[A], fn: (value: A) -> T[B]): T[B] -> match option {
    Some(value) -> fn(value),
    None -> None,
  },

  map = [A, B](option: T[A], fn: (value: A) -> B): T[B] -> match option {
    Some(value) -> Some(fn(value)),
    None -> None,
  },

  filter = [A](option: T[A], fn: (value: A) -> Boolean): T[A] -> match option {
    Some(value) -> if fn(value) { Some(value) } else { None },
    None -> None,
  },

  orElse = [A](option: T[A], fn: () -> T[A]): T[A] -> match option {
    Some(_) -> option,
    None -> fn(),
  },

  toResult = [A, B](option: T[A], fn: () -> B): Result.T[A, B] -> match option {
    Some(value) -> Result.Ok(value),
    None -> Result.Err(fn()),
  },

  equals = [A](eq: Eq.T[A], val1: T[A], val2: T[A]): Boolean ->
    if isSome(val1) && isSome(val2) {
      eq.equals(unwrap(val1), unwrap(val2))
    } else {
      !isSome(val1) && !isSome(val2)
    },
}

Result {
  use std/Option,
  type T[A, B] = | Ok(A) | Err(B),

  ok = [A, B](value: A): T[A, B] -> Ok(value),
  err = [A, B](value: B): T[A, B] -> Err(value),

  isOk = [A, B](result: T[A, B]): Boolean -> match result {
    Ok(_) -> true,
    Err(_) -> false,
  },

  getOrElse = [A, B](result: T[A, B], fn: () -> A): A -> match result {
    Ok(value) -> value,
    Err(_) -> fn(),
  },

  flatMap = [A, B, C](result: T[A, B], fn: (value: A) -> T[C, B]): T[C, B] -> match result {
    Ok(value) -> fn(value),
    Err(err) -> Err(err),
  },

  map = [A, B, C](result: T[A, B], fn: (value: A) -> C): T[C, B] -> match result {
    Ok(value) -> Ok(fn(value)),
    Err(err) -> Err(err),
  },

  orElse = [A, B](result: T[A, B], fn: () -> T[A, B]): T[A, B] -> match result {
    Ok(value) -> Ok(value),
    Err(_) -> fn(),
  },

  mapErr = [A, B, C](result: T[A, B], fn: (err: B) -> C): T[A, C] -> match result {
    Ok(value) -> Ok(value),
    Err(err) -> Err(fn(err)),
  },

  toOption = [A, B](result: T[A, B]): Option.T[A] -> match result {
    Ok(value) -> Option.Some(value),
    Err(_) -> Option.None,
  },
}

List {
  use std/Eq,
  use foreign java/util/ArrayList,
  use foreign java/util/Iterator,

  type T[A] = { list: ArrayList[A] },

  new = [A](): T[A] -> T { list = ArrayList#new() },

  of = [A](value: A): T[A] -> {
    let list = ArrayList#new()
    ArrayList#add(list, value)
    T { list = list }
  },

  conj = [A](list: T[A], value: A): T[A] -> {
    let listCopy = ArrayList#new(list.list)
    ArrayList#add(listCopy, value)
    T { list = listCopy }
  },

  get = [A](list: T[A], idx: Int): A -> ArrayList#get(list.list, idx),

  size = [A](list: T[A]): Int -> ArrayList#size(list.list),

  flatMap = [A, B](list: T[A], mapper: (value: A) -> T[B]): T[B] -> {
    let size = ArrayList#size(list.list)
    let newList = ArrayList#new()
    loop (let i = 0) ->
      if i < size {
        let item = get(list, i)
        ArrayList#addAll(newList, mapper(item).list)
        recur(i + 1)
      } else {
        T { list = newList }
      }
  },

  map = [A, B](list: T[A], mapper: (value: A) -> B): T[B] -> {
    let size = ArrayList#size(list.list)
    let newList = ArrayList#new(size)
    loop (let i = 0) ->
      if i < size {
        let item = get(list, i)
        ArrayList#add(newList, mapper(item))
        recur(i + 1)
      } else {
        T { list = newList }
      }
  },

  filter = [A](list: T[A], filterer: (value: A) -> Boolean): T[A] -> {
    let size = ArrayList#size(list.list)
    let newList = ArrayList#new(size)
    loop (let i = 0) ->
      if i < size {
        let item = get(list, i)
        if (filterer(item)) ArrayList#add(newList, item)
        recur(i + 1)
      } else {
        T { list = newList }
      }
  },

  reduce = [A, B](list: T[A], init: B, accumulator: (accum: B, value: A) -> B): B -> {
    let size = size(list)
    loop (let i = 0, let b = init) ->
      if i < size {
        let item = get(list, i)
        recur(i + 1, accumulator(b, item))
      } else {
        b
      }
  },

  equals = [A](list: T[A], otherList: T[A], eq: Eq.T[A]): Boolean -> {
    let size = size(list)
    let otherSize = size(otherList)
    loop (let i = 0, let isEq = size == otherSize) ->
      if isEq && i < size && i < otherSize {
        let item = get(list, i)
        let otherItem = get(otherList, i)
        recur(i + 1, isEq && eq.equals(item, otherItem))
      } else {
        isEq
      }
  }
}

Hash {
  type T[A] = { hashCode: (value: A) -> Int, .. },

  new = [A](fn: (value: A) -> Int): T[A] -> T {
    hashCode = fn,
  }
}

Map {
  use foreign java/util/HashMap,
  use foreign java/util/Set,
  use foreign java/util/Iterator,
  use foreign java/util/Map$Entry,
  use foreign java/util/Objects,

  use std/Option,
  use std/Hash,

  type T[A, B] = {
    hasher: Hash.T[A],
    map: HashMap[A, B],
  },

  new = [A, B](hasher: Hash.T[A]): T[A, B] -> T {
    hasher = hasher,
    map = HashMap#new()
  },

  of = [A, B](hasher: Hash.T[A], key: A, value: B): T[A, B] -> {
    let map = new(hasher)
    HashMap#put(map.map, key, value)
    map
  },

  get = [A, B](map: T[A, B], key: A): Option.T[B] -> {
    let value = HashMap#get(map.map, key)
    if Objects#nonNull(value) {
      Option.Some(value)
    } else {
      Option.None
    }
  },

  size = [A, B](map: T[A, B]): Int -> HashMap#size(map.map),

  assoc = [A, B](map: T[A, B], key: A, value: B): T[A, B] -> {
    let newMap = HashMap#new(map.map)
    HashMap#put(newMap, key, value)
    T { hasher = map.hasher, map = newMap }
  },

  dissoc = [A, B](map: T[A, B], key: A): T[A, B] -> {
    let newMap = HashMap#new(map.map)
    HashMap#remove(newMap, key)
    T { hasher = map.hasher, map = newMap }
  },

  map = [A, B, C, D](map: T[A, B], hasher: Hash.T[C], mapper: (key: A, value: B) -> (C, D)): T[C, D] -> {
    let newMap = HashMap#new(HashMap#size(map.map))
    let entrySet = HashMap#entrySet(map.map)
    loop (let iter = Set#iterator(entrySet)) ->
      if Iterator#hasNext(iter) {
        let entry = Iterator#next(iter)
        let mappedEntry = mapper(Entry#getKey(entry), Entry#getValue(entry))
        HashMap#put(newMap, mappedEntry._0, mappedEntry._1)
        recur(iter)
      } else {
        T { hasher = hasher, map = newMap }
      }
  },
}
